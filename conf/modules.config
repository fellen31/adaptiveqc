/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: TARGET_READ_ID_TO_HIVE {

        publishDir = [

            path: { "${params.outdir}/target_read_id_to_hive/experiment=${meta.experiment}/sample=${meta.sample}/protocol=${meta.run_id}/barcode=${meta.barcode}/region=${meta.region}/file=${meta.file}/" },
            mode: 'copy', // Can't read symlinks into R
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
     withName: FQCRS_TO_HIVE_REBASECALL {

        publishDir = [

            path: { "${params.outdir}/fqcrs_hive_rebasecall/experiment=${meta.experiment}/sample=${meta.sample}/protocol=${meta.run_id}/barcode=${meta.barcode}/file=${meta.file}/" },
            mode: 'copy', // Can't read symlinks into R
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: ONT_SEQUENCING_SUMMARY_TO_PARQUET {

        publishDir = [
            // Why not use sample instread of run_id?
            path: { "${params.outdir}/sequencing_summary_hive/experiment=${meta.experiment}/run_id=${meta.run_id}/" },
            mode: 'copy', // Can't read symlinks into R
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MOSDEPTH_REBASECALL {

        ext.args = '-n'

        publishDir = [
            path: { "${params.outdir}/mosdepth_by/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: MOSDEPTH_INVERSE {

        ext.args = '-n'

        publishDir = [
            path: { "${params.outdir}/mosdepth_by_inverse/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: MOSDEPTH_500 {

        ext.args = '--by 500 -n'

        publishDir = [
            path: { "${params.outdir}/mosdepth_500/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: 'MINIMAP2_ALIGN' {
        ext.args = '-y -Y -x map-ont --secondary=no'
    }

    withName: 'SAMTOOLS_VIEW_FASTQ_PASS' {

        ext.args = "-e \'[qs]>=${params.pass_threshold}\'"
        ext.args2 = "-T MM,ML,MN"
        ext.prefix = { "${meta.id}.pass" }

        publishDir = [
            path: { "${params.outdir}/samtools_view_fastq_pass/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]

    }

    withName: 'BEDTOOLS_SORT' {
        ext.prefix = { "${meta.id}.sorted" }
    }

    withName: 'BEDTOOLS_COMPLEMENT' {
        ext.prefix = { "${meta.id}.inverted" }
    }

    withName: 'SAMTOOLS_VIEW_ON_TARGET_READS' {

            publishDir = [
            path: { "${params.outdir}/on_target_reads/${meta.experiment}/${meta.sample}/${meta.run_id}/${meta.type}/${meta.barcode}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
}
    withName: 'SAMTOOLS_VIEW_TARGET_READS_REGIONS' {

            publishDir = [
            path: { "${params.outdir}/on_target_reads_per_region/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
}
    withName: 'SAMTOOLS_VIEW_OFF_TARGET_READS' {

            publishDir = [
            path: { "${params.outdir}/off_target_reads/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
}
    withName: 'SAMTOOLS_FASTQ_SAMTOOLS_PASS' {
        ext.args = '-T MM,ML'

            publishDir = [
            path: { "${params.outdir}/samtools_fastq_samtools_pass/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
}

    withName: 'MINIMAP2_INDEX' {
        ext.args = '-x map-ont'
    }

    withName: 'MULTIQC' {
        ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
